syntax = "proto3";

option java_multiple_files = true;

package chatnexus.chat;

///
/// Auth Service
///
enum AuthType {
    OAuth2 = 0;
}

enum AuthStatus {
    OK = 0;
    PENDING = 1;
    DENIED = 2;
}

enum AuthStage {
    PREREQUISITES = 0; // Create session_id and token for the user & url.
    AUTHORIZATION = 1; // Waiting to finish sign in page... through oauth2
    COMPLETED = 2; // Authentication has finished... 
}

service Auth {
    rpc NotifyPresence(Empty) returns (AuthPresenseResponse);
    rpc PromoteStage(AuthRequest) returns (AuthResponse);
    rpc CheckAuthStage(AuthRequest) returns (AuthResponse);
    rpc VerifyUser(AuthVerifyRequest) returns (AuthVerifyResponse); // Used only by the web server..
}

message AuthRequest {
    string session_id = 1;
}

message AuthResponse {
    AuthType type = 1;
    AuthStatus status = 2;
    optional AuthStage stage = 3;
    string session_id = 4;
    optional string url = 5;
    optional string code = 6;
}

message AuthPresenseResponse {
    AuthType auth_type = 1;
}

message AuthVerifyRequest {
    string secret_key = 1;
    string session_id = 2;
    string code = 3;
    string uid = 4;
    string username = 5;
    string discriminator = 6;
}

message AuthVerifyResponse {
    AuthStatus status = 1;
}

///
/// Chat Service
///
service Chat {
    rpc SendMessage (ChatRequest) returns (Empty);
    rpc RecieveMessage (ChatFilter) returns (stream ChatResponse);
}

message Empty {} // Empty request

message ChatRequest { // client request
    string session_id = 1; //
    string message = 2;
}

message ChatFilter {
    string session_id = 1;
    int64 at_message = 2;
}

message ChatResponse { // client response
    string username = 1;
    string discriminator = 2;
    string message = 3;
    string at_message = 4;
}

message BarenResponse {
    string message = 1;
}